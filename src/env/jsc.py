#!/usr/bin/env python

import commands
import getopt
import json
import os
import re
import sys


class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg

USAGE = """Usage: jshint.py path path2 [options]

Options:

    --version            display package version
    --config             custom config file
    --reporter           custom reporter
    --jslint-reporter    use a jslint compatible xml reporter
    --show-non-errors    show additional data generated by jshint
"""


def lint(f):
    jsc = '/System/Library/Frameworks/JavaScriptCore.framework/Versions/A/Resources/jsc'
    js = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'jsc.js')

    if not os.path.exists(f):
        print >>sys.stderr, "File", f, "wasn't found."
        return 0

    with open(f, 'r') as stream:
        status, output = commands.getstatusoutput('%(jsc)s %(js)s -- "%(contents)s" "{}"' % {
            'jsc': jsc,
            'js': js,
            'contents': stream.read()
        })

        print output
    return 0


def main(argv=None):
    if argv is None:
        argv = sys.argv

    try:
        try:
            params = ["version", "config", "reporter", "jslint-reporter", "show-non-errors"]
            opts, args = getopt.getopt(argv[1:], "", params)
        except getopt.error, msg:
            raise Usage(msg)
        else:
            opts = dict(opts)

        if '--version' in opts:
            print '__version__'

        if '--config' in opts:
            raise NotImplementedError()

        if '--reporter' in opts:
            raise NotImplementedError()

        if '--jslint-reporter' in opts:
            raise NotImplementedError()

        if '--show-non-errors' in opts:
            raise NotImplementedError()

        numerr = sum([lint(f) for f in args])
        print numerr
    except Usage, err:
        print >>sys.stderr, err.msg
        print >>sys.stderr, USAGE
        return 2


if __name__ == "__main__":
    sys.exit(main())
